#! /usr/bin/env node
//console.log('Starting Node');
require = require('esm')(module);

const bootAddress = process.env.BOOT_ADDRESS;
const ROLE = process.env.ROLE || 'chain';

// TODO: use the 'basedir' pattern, or find the cosmos state directory
// (~/.ag-chain-cosmos ?), or something anything better than scribbling
// into the current directory.
const stateFile = 'ag-cosmos-chain-state.json';

const { launch } = require('./launch-chain');
const path = require('path');
const stringify = require('@agoric/swingset-vat/src/kernel/json-stable-stringify').default;

const agcc = require('bindings')('agcosmosdaemon.node');
//console.log('Have AG_COSMOS', agcc);

const portHandlers = {};
let lastPort = 0;
function registerPortHandler(portHandler) {
  const port = ++lastPort;
  portHandlers[port] = portHandler;
  return port;
}
function fromGo(port, str, replier) {
  const handler = portHandlers[port];
  if (!handler) {
    return replier.reject(`invalid requested port ${port}`);
  }
  const action = JSON.parse(str);
  const p = Promise.resolve(handler(action));
  p.then(res => replier.resolve(`${res}`),
         rej => replier.reject(`rejection ${rej} ignored`));
}

// Actually run the main ag-chain-cosmos program.  Before we start the daemon,
// there will be a call to nodePort/AG_COSMOS_INIT, otherwise exit.
const nodePort = registerPortHandler(toSwingSet);
// Need to keep the process alive until Go exits.
setInterval(() => undefined, 30000);
agcc.runAG_COSMOS(nodePort, fromGo, process.argv.slice(1));

let deliverInbound;
// this storagePort changes for every single message. We define it out here
// so the 'externalStorage' object can close over the single mutable
// instance, and we update the 'sPort' value each time toSwingSet is called
let sPort;

async function toSwingSet(action, replier) {
  console.log(`toSwingSet`, action, replier);
  if (action.type === 'AG_COSMOS_INIT') {
    return true;
  }

  // Only start running for DELIVER_INBOUND.
  if (action.type !== 'DELIVER_INBOUND') {
    throw `Unknown action type ${action.type}`;
  }

  if (action.storagePort) {
    // Initialize the storage for this particular transaction.
    //console.log(` setting sPort to`, action.storagePort);
    sPort = action.storagePort;
  }

  // launch the swingset once
  if (!deliverInbound) {
    // this object is used to store the mailbox state. we only ever use
    // key='mailbox'
    const mailboxStorage = {
      has(key) {
        // x/swingset/storage.go returns "true" or "false"
        const retStr = agcc.send(sPort, stringify({method: "has", key}));
        const ret = JSON.parse(retStr)
        if (Boolean(ret) !== ret) {
          throw new Error(`agcc.send(has) returned ${ret} not Boolean`);
        }
        return ret;
      },
      set(key, value) {
        if (value !== `${value}`) {
          throw new Error(`golang storage API only takes string values, not '${JSON.stringify(value)}'`);
        }
        const encodedValue = stringify(value);
        agcc.send(sPort, stringify({method: "set", key, value: encodedValue}));
      },
      get(key) {
        const retStr = agcc.send(sPort, stringify({method: "get", key}));
        //console.log(`s.get(${key}) retstr=${retstr}`);
        const encodedValue = JSON.parse(retStr);
        //console.log(` encodedValue=${encodedValue}`);
        const value = JSON.parse(encodedValue);
        //console.log(` value=${value}`);
        return value;
      },
    };

    const vatsdir = path.resolve(__dirname, '../lib/ag-solo/vats');
    const argv = [`--role=${ROLE}`, bootAddress];
    const s = await launch(mailboxStorage, stateFile, vatsdir, argv);
    deliverInbound = s.deliverInbound;
  }

  const d = deliverInbound(action.peer, action.messages, action.ack);
  d.then(undefined,
         rej => {
           console.log(`deliverInbound failed`, rej);
           throw rej;
         });
  return await d;
}
